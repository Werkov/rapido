# SPDX-License-Identifier: (LGPL-2.1 OR LGPL-3.0)
# Copyright (C) SUSE LLC 2016-2022, all rights reserved.

. /rapido.conf

alias shutdown='echo o > /proc/sysrq-trigger'
alias reboot='echo b > /proc/sysrq-trigger'
alias vi='vim'
alias view='vim -R'
alias l='ls -la'

function _fatal() {
	shutdown
	sleep 2
}

# safety check to confirm that autorun scripts run from a rapido VM
function _vm_ar_env_check {
	[ -f /rapido.conf ]
}

# create /etc/hosts file with the essential IPv4 and IPv6 lines
function _vm_ar_hosts_create
{
	local hostname_fqn="`cat /proc/sys/kernel/hostname`" \
		|| _fatal "hostname unavailable"
	local hostname_short="${hostname_fqn%%.*}"

	# need hosts file for hostname -s
	cat > /etc/hosts <<EOF
127.0.0.1	localhost
127.0.1.1	$hostname_fqn	$hostname_short

::1		localhost ip6-localhost ip6-loopback
ff02::1		ip6-allnodes
ff02::2		ip6-allrouters
EOF
}

# set a kcli_$param variable based on the presence of $param[=$value] in
# /proc/cmdline. Dots '.' in $param will be replaced in the variable with '_'.
# If $param is present but doesn't have an "=$value" component, then
# kcli_$param will be set to an empty string, otherwise it'll be set to
# $value.
function _vm_kcli_param_get()
{
	local param=$1

	[ -n "$param" ] || _fatal "invalid kcli param"

	local variable="kcli_${param//./_}"
	eval unset $variable

	for i in $(cat /proc/cmdline); do
		case "$i" in
			"${param}="*)
				val="${i#${param}=}"
				eval ${variable}=${val}
				return
				;;
			"${param}")
				eval ${variable}=""
				return
				;;
		esac
	done
	# $param not found, variable unset
}

function _vm_ar_hostname_set
{
	# networkless VM, so get the rapido.vm_num value from the kernel command
	# line and use HOSTNAME<vm_num> configured in rapido.conf
	_vm_kcli_param_get "rapido.vm_num"
	[ -z "$kcli_rapido_vm_num" ] && _fatal "rapido.vm_num missing in kcli"

	eval local hostname='$HOSTNAME'${kcli_rapido_vm_num}
	[ -z "$hostname" ] && hostname="rapido${kcli_rapido_vm_num}"
	echo $hostname > /proc/sys/kernel/hostname \
		|| _fatal "failed to set hostname"
}

# enable dynamic debug for all DYN_DEBUG_MODULES and DYN_DEBUG_FILES specified
# in rapido.conf. This should be called *after* all kernel modules are loaded.
function _vm_ar_dyn_debug_enable
{
	if [ ! -d "/sys/kernel/debug/dynamic_debug" ]; then
		mount -t debugfs debugfs /sys/kernel/debug/
	fi

	for i in $DYN_DEBUG_MODULES; do
		echo "module $i +pf" > /sys/kernel/debug/dynamic_debug/control
	done

	for i in $DYN_DEBUG_FILES; do
		echo "file $i +pf" > /sys/kernel/debug/dynamic_debug/control
	done
}

function _vm_ar_virtfs_mount
{
	[ -z "$VIRTFS_SHARE_PATH" ] && return

	mkdir /host || _fatal "unable to create /host"
	mount -t 9p host0 /host || _fatal "unable to mount host"
}

function _vm_ar_configfs_mount
{
	cat /proc/mounts | grep -m1 configfs &> /dev/null
	if [ $? -ne 0 ]; then
		mount -t configfs configfs /sys/kernel/config/
	fi
}

if [[ "$(cat /proc/cmdline)" == *"ip=none"* ]]; then
	# networkless VM - set hostname manually
	_vm_ar_hostname_set
fi
export TERM="linux"
export PS1="$(cat /proc/sys/kernel/hostname):\${PWD}# "
resize &> /dev/null
_vm_ar_virtfs_mount

# The boot sequence is:
# dracut -> 00-rapido-init.sh -> .profile (vm_autorun.env) -> /rapido_autorun/*
for _f in /rapido_autorun/*; do
	echo "Rapido: starting $_f"
	[ -f "$_f" ] && . "$_f"
done
